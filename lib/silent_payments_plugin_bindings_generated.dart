// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/silent_payments_plugin.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class SilentPaymentsPluginBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  SilentPaymentsPluginBindings(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  SilentPaymentsPluginBindings.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  ffi.Pointer<ffi.Int8> api_scan_outputs(ffi.Pointer<ParamData> data) {
    return _api_scan_outputs(data);
  }

  late final _api_scan_outputsPtr = _lookup<
    ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ParamData>)>
  >('api_scan_outputs');
  late final _api_scan_outputs =
      _api_scan_outputsPtr
          .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ParamData>)>();

  void free_pointer(ffi.Pointer<ffi.Char> ptr) {
    return _free_pointer(ptr);
  }

  late final _free_pointerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
        'free_pointer',
      );
  late final _free_pointer =
      _free_pointerPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();
}

final class OutputData extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> pubkey_bytes;

  @ffi.Uint64()
  external int amount;
}

final class ReceiverData extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> b_scan_bytes;

  external ffi.Pointer<ffi.Uint8> B_spend_bytes;

  @ffi.Bool()
  external bool is_testnet;

  external ffi.Pointer<ffi.Uint32> labels;

  @ffi.Uint64()
  external int labels_len;
}

final class ParamData extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<OutputData>> outputs_data;

  @ffi.Uint64()
  external int outputs_data_len;

  external ffi.Pointer<ffi.Uint8> tweak_bytes;

  external ffi.Pointer<ReceiverData> receiver_data;
}
